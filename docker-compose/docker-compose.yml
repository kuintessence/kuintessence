version: "3.3"
services:
  db:
    container_name: db
    image: postgres:14
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: co
    networks:
      - demonet
    ports:
      - 5432:5432
    healthcheck:
      test: pg_isready -U postgres
      interval: 1s
      timeout: 3s
      retries: 60
  redis:
    container_name: redis
    image: redis:6.0.9-alpine
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - redis_data:/data/redis
      - ./redis:/redisconf
    networks:
      - demonet
    ports:
      - 6379:6379
    command: /bin/sh -c "rm -rf /data/redis/lost+found && redis-server --include /redisconf/default.conf --include /redisconf/user.conf"
  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    networks:
      - demonet
    ports:
      - "2181:2181"
  kafka:
    container_name: kafka
    image: wurstmeister/kafka:2.13-2.8.1
    depends_on:
      - zookeeper
    networks:
      - demonet
    volumes:
      - /etc/localtime:/etc/localtime
    ports:
      - "9092:9092"
      - "50888:50888"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LOG_RETENTION_HOURS: 120
      KAFKA_MESSAGE_MAX_BYTES: 10000000
      KAFKA_REPLICA_FETCH_MAX_BYTES: 10000000
      KAFKA_GROUP_MAX_SESSION_TIMEOUT_MS: 60000
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DELETE_RETENTION_MS: 1001
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://:50888
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:50888
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
  minio:
    container_name: minio
    image: kuintessence/kuintessence-minio:2022
    networks:
      - demonet
    environment:
      MINIO_ROOT_USER: "root"
      MINIO_ROOT_PASSWORD: "minioadmin"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
  hasura:
    container_name: hasura
    image: hasura/graphql-engine:v2.27.0
    depends_on:
      db-operator:
        condition: service_started
    networks:
      - demonet
    volumes:
      - /etc/localtime:/etc/localtime
    ports:
      - "8080:8080"
    environment:
      HASURA_GRAPHQL_DATABASE_URL: postgres://postgres:postgres@db:5432/co
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
      HASURA_GRAPHQL_ENDPOINT: 0.0.0.0
      HASURA_GRAPHQL_DEV_MODE: "true"
      HASURA_GRAPHQL_UNAUTHORIZED_ROLE: anonymous
      HASURA_GRAPHQL_CORS_DOMAIN: "*"
      HASURA_GRAPHQL_ADMIN_SECRET: "admin"
      HASURA_GRAPHQL_JWT_SECRET: '{"jwk_url":"http://keycloak:8080/auth/realms/kuintessence/protocol/openid-connect/certs"}'
    healthcheck:
      test: curl http://127.0.0.1:8080 || exit 1
      interval: 1s
      timeout: 3s
      retries: 60
    command: sh -c "sleep 30 && graphql-engine serve"
  db-operator:
    container_name: db-operator
    image: kuintessence/db-operator:v0.0.1
    networks:
      - demonet
    depends_on:
      db:
        condition: service_healthy
  billing-system:
    container_name: billing-system
    image: kuintessence/kuintessence-billing-system:v0.0.1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - demonet
    ports:
      - "8081:80"
    environment:
      TZ: Asia/Shanghai
      ALICE__COMMON__DB__URL: "postgres://postgres:postgres@db:5432/co"
      ALICE__COMMON__REDIS__URLS: "redis://redis:6379"
      ALICE__mq__client_options__bootstrap__servers: "kafka:50888"
      ALICE__co_repo_domain: "https://hub-api.suan.wang"
  workflow-editor:
    container_name: workflow-editor
    image: kuintessence/kuintessence-computing-orchestration-system:v0.0.1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - demonet
    ports:
      - "8082:80"
    environment:
      TZ: Asia/Shanghai
      COS__HOST__BIND_PORT: 80
      ALICE__COMMON__DB__URL: "postgres://postgres:postgres@db:5432/co"
      ALICE__COMMON__REDIS__URLS: "redis://redis:6379"
      ALICE__mq__client_options__bootstrap__servers: "kafka:50888"
      ALICE__co_repo_domain: "https://hub-api.suan.wang"
      ALICE__default_storage_server_id: "4f600062-0105-40a4-aa7d-6f373cc51358"
    healthcheck:
      test: curl http://127.0.0.1:80 || exit 1
      interval: 1s
      timeout: 3s
      retries: 60
  cru-ui:
    container_name: cru-ui
    image: kuintessence/kuintessence-user:v0.0.1
    depends_on:
      workflow-editor:
        condition: service_healthy
      billing-system:
        condition: service_started
    networks:
      - demonet
    ports:
      - "8083:80"
    environment:
      TZ: Asia/Shanghai
    healthcheck:
      test: curl http://127.0.0.1:80/index.html || exit 1
      interval: 1s
      timeout: 3s
      retries: 60
  crp-ui:
    container_name: crp-ui
    image: kuintessence/kuintessence-provider:v0.0.1
    depends_on:
      workflow-editor:
        condition: service_healthy
      billing-system:
        condition: service_started
    networks:
      - demonet
    ports:
      - "8084:80"
    environment:
      TZ: Asia/Shanghai
    healthcheck:
      test: curl http://127.0.0.1:80/index.html || exit 1
      interval: 1s
      timeout: 3s
      retries: 60
  web:
    container_name: web
    image: nginx:1.25.2
    depends_on:
      workflow-editor:
        condition: service_healthy
      cru-ui:
        condition: service_healthy
      crp-ui:
        condition: service_healthy
      hasura:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - demonet
    ports:
      - 80:80
    volumes:
      - ./nginx:/etc/nginx
  keycloak-mariadb:
    container_name: keycloak-mariadb
    image: docker.io/bitnami/mariadb:10.3.18-debian-9-r0
    restart: always
    networks:
      - demonet
    ports:
      - 3306:3306
    volumes:
      - mariadbdata:/bitnami/mariadb/data
      - ./kc-mariadb/my.cnf:/opt/bitnami/mariadb/conf/my.cnf
    environment:
      MARIADB_DATABASE: keycloak
      MARIADB_USER: kc
      MARIADB_ROOT_PASSWORD: Wae0vai6
      MARIADB_PASSWORD: Oeb6uu3j
      TZ: Asia/Shanghai
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    restart: always
    networks:
      - demonet
    environment:
      KC_DB: mariadb
      KC_DB_URL_HOST: keycloak-mariadb
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: kc
      KC_DB_URL_PORT: 3306
      KC_DB_PASSWORD: Oeb6uu3j
      TZ: Asia/Shanghai
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_HTTP_RELATIVE_PATH: "/auth"
      KC_HTTP_PORT: 8080
      RECREATE_SIGNAL: 33
      KC_HEALTH_ENABLED: "true"
      PROXY_ADDRESS_FORWARDING: "true"
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_BACKCHANNEL: "false"
      KC_HOSTNAME_PATH: "/auth"
      KC_PROXY: edge
      KEYCLOAK_USER: admin
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_PASSWORD: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HTTP_ENABLED: "true"
      KC_FEATURES: "token-exchange,admin2,ciba,account-api,scripts,declarative-user-profile,DYNAMIC_SCOPES,DECLARATIVE_USER_PROFILE"
      #KC_HOSTNAME: 'keyclook.suan.wang'
      #KC_HOSTNAME_ADMIN: 'keyclook.suan.wang'
    ports:
      - 8085:8080
      - 8443:8443
    volumes:
      - ./keycloak/themes:/opt/keycloak/themes
      - ./keycloak/providers:/opt/keycloak/providers
      - ./keycloak/kuintessence-realm.json:/opt/keycloak/data/import/kuintessence-realm.json
    command: start --auto-build  --db=mariadb --proxy=edge --import-realm
    depends_on:
      - keycloak-mariadb
    healthcheck:
      test: curl http://127.0.0.1:8080/auth || exit 1
      interval: 1s
      timeout: 3s
      retries: 60
networks:
  demonet:

volumes:
  db_data: {}
  redis_data: {}
  minio_data: {}
  mariadbdata: {}
